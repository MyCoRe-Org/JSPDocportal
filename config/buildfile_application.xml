<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- =================================================================== -->
<!-- MyCoRe sample application build file for use with Apache Ant        -->
<!-- $Revision$ $Date$                      -->
<!-- =================================================================== -->

<project default="usage" basedir=".">

    <!-- =================================================================== -->
    <!-- Global properties                                                   -->
    <!-- =================================================================== -->

    <!-- Javac properties -->
    <property name="debug" value="on" />
    <property name="optimize" value="on" />
    <property name="deprecation" value="on" />
    <property name="javatarget" value="1.4" />
    <property name="sourcerelease" value="1.4" />
    <property name="sourceencoding" value="ISO-8859-15" />

    <!-- Maximum amount of memory to allocate to java VM when loading -->
    <property name="java.maxmemory" value="256m" />

    <!-- Read in environment variables -->
    <property environment="env" />

    
		
	
	<!-- Provide a default value for MYCORE_HOME if not set in env -->
    <!-- <property name="env.MYCORE_HOME" value="../mycore" /> -->
	<property name="MYCORE_HOME" value="../mycore" />
	
	<property name="mycore.modules" value="${MYCORE_HOME}/modules" />

    <!-- Read in properties from config/build.properties -->
    <property file="${MYCORE_HOME}/config/build.properties" />
	
	

    <!-- Provide a default value for DOCPORTAL_SYSTEM if not set in env -->
    <property name="DOCPORTAL_SYSTEM" location="${basedir}/../mycore-working" />
	
	<property name="DOCPORTAL_HOME" value="../jspdocportal" />

    <!-- Read in BaseDirectory from config/mycore.properties -->
	<loadproperties srcfile="./config/mycore.properties">
		<filterchain>
			<linecontainsregexp>
			  <regexp pattern="\\AMCR.BaseDirectory"/>
			</linecontainsregexp>
		</filterchain>
	</loadproperties>	
	
	<!-- Read in all properties and replace %MCR.BaseDirectory% with above red MCR.BaseDirectory -->
	<loadproperties srcfile="./config/mycore.properties">
		<filterchain>
	    	<filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
	    	      <param type="tokenchar" name="begintoken" value="%"/>
	              <param type="tokenchar" name="endtoken" value="%"/>
	              <param type="token" name="MCR.BaseDirectory" value="${MCR.BaseDirectory}"/>
	    	</filterreader>
		</filterchain>
	</loadproperties>
	
    <!-- MyCoRe CVS repository root -->
    <property name="CVSRoot" value="/cvs" />

    <property name="docportal.bin" value="${DOCPORTAL_SYSTEM}/bin" />
    <property name="docportal.classes"
        value="${DOCPORTAL_SYSTEM}/classes" />
    <property name="docportal.javadocs"
        value="${DOCPORTAL_SYSTEM}/javadocs" />
    <property name="docportal.changelogs"
        value="${DOCPORTAL_SYSTEM}/changelogs" />
    <property name="docportal.config"
        value="${DOCPORTAL_SYSTEM}/config" />
    <property name="docportal.content"
        value="${DOCPORTAL_SYSTEM}/content" />
    <property name="docportal.doc"
        value="${DOCPORTAL_SYSTEM}/documentation" />
    <property name="docportal.languages"
        value="${DOCPORTAL_SYSTEM}/languages" />
    <property name="docportal.filestore"
        value="${MCR.IFS.ContentStore.Lucene.BaseDirectory}" />
    <property name="docportal.lib" value="${DOCPORTAL_SYSTEM}/lib" />
    <property name="docportal.lucenestore"
        value="${MCR.IFS.ContentStore.Lucene.IndexDirectory}" />
    <property name="docportal.save" value="${MCR.Save.FileSystem}" />

    <property name="docportal.schema"
        value="${DOCPORTAL_SYSTEM}/schema" />
    <property name="docportal.stylesheets"
        value="${DOCPORTAL_SYSTEM}/stylesheets" />
    <property name="docportal.sources"
        value="${DOCPORTAL_SYSTEM}/sources" />
    <property name="docportal.webpages"
        value="${DOCPORTAL_SYSTEM}/webpages" />
    <property name="docportal.webapps"
        value="${DOCPORTAL_SYSTEM}/webapps/mycoresample" />
    <property name="docportal.workflow"
        value="${MCR.editor_base_directory}" />

    <property name="docportal.WEB-INF"
        value="${docportal.webapps}/WEB-INF" />

    <!-- =================================================================== -->
    <!-- Help on usage                                                       -->
    <!-- =================================================================== -->

    <target name="usage">
        <echo>
            Usage: build.sh [target] or build.cmd [target] or ant
            [target]

            Available targets are: info --> Shows Java/Ant/Operating
            System version, CLASSPATH etc. clean --> Removes all
            generated files, cleaning up

            compile --> Compiles all sources under the sample directory
            jar --> Generate a docportal-for-*.jar file of the compiled
            classes

            hsqldbstart --> for starting the hsqldb-database hsqldbstop
            --> for stopping the hsqldb-database

            create.class --> load all default classifications
            create.directories --> Create all working directories
            create.genkeys --> Create a key pair to sign the Java
            applets create.metastore --> Create datastore structures for
            XML persistency from configuration create.schema --> Generates all schema files from the configuration files
            create.scripts --> Create the commandline scripts
            create.users --> Laden der Start-User, Groups and Privilegs.
            create.hibindexer --> Creates the java-class for the sql-query-table, must be executed before the first: ant jar
            webapps --> Build the complete sample web application
            directory war --> Build the web application archive (war)

            Please do not use any of the other targets, they are
            internal.
        </echo>
    </target>

    <!-- =================================================================== -->
    <!-- Output environment variables, software and operating system version -->
    <!-- =================================================================== -->

    <target name="info" depends="show" />

	<target name="show" depends="init">
	    <echo>Base directory     : ${basedir}</echo>
	    <echo>MyCoRe home dir    : ${MYCORE_HOME}</echo>
	    <echo>DocPortal home dir : ${DOCPORTAL_SYSTEM}</echo>
	    <echo>Operating system   : ${os.name} Version ${os.version} on ${os.arch} </echo>
	    <echo>Java version       : JDK ${ant.java.version} Version ${java.version} from ${java.vendor}</echo>
	    <echo>Java home          : ${env.JAVA_HOME}</echo>
	    <echo>Ant build file     : $Revision$ $Date$</echo>
	    <echo>Ant version        : ${ant.version}</echo>
	    <echo>Ant home           : ${env.ANT_HOME}</echo>
	    <echo>XML Store type     : ${MCR.XMLStore.Type}</echo>
	    <echo>System CLASSPATH   : ${build.sysclasspath}</echo>
	    <echo>Active CLASSPATH   : ${docportal.classpath.translated}</echo>
	    <echo>Active LIBPATH     : ${docportal.libpath.translated}</echo>
	</target>

    <target name="test-sql" depends="init">
        <sql driver="${MCR.persistence_sql_driver}"
            url="${MCR.persistence_sql_database_url}"
            src="${docportal.config}/show.${MCR.JDBCStore.Type}.sql"
            userid="${MCR.persistence_sql_database_userid}"
            password="${MCR.persistence_sql_database_passwd}"
            classpathref="docportal.classpath" print="true" />
    </target>

    <!-- =================================================================== -->
    <!-- Initalization of directories and CLASSPATH, LIBPATH                 -->
    <!-- =================================================================== -->
	
	<target name="initDOCPORTAL_SYSTEM">
		<mkdir dir="${DOCPORTAL_SYSTEM}" />
    	<copy todir="${DOCPORTAL_SYSTEM}">
 			<fileset dir="${DOCPORTAL_HOME}" includes="**" ></fileset>
		</copy>
		<copy todir="${DOCPORTAL_SYSTEM}" overwrite="true">
		 	<fileset dir="." includes="**" excludes="mycoresample.war,jspdocportal-installer*" ></fileset>
		</copy>
        <mkdir dir="${docportal.webapps}" />
    	<mkdir dir="${docportal.bin}" />
	</target>

    <target name="init"
        depends="jdbcstore.path.1, jdbcstore.path.2, xmlstore.path.1, xmlstore.path.2, initDOCPORTAL_SYSTEM">

        <!-- Copy stylesheets from MyCoRe to MyCoRe Sample Application -->
        <copy todir="${docportal.stylesheets}">
            <fileset dir="${MYCORE_HOME}/stylesheets" excludes="MCRJdom*.xsl">
                <include name="MCR*.xsl" />
            </fileset>
        </copy>

        <!-- Fail if environment variables are not set -->
        <fail message="Environment variable JAVA_HOME is not set!"
            unless="env.JAVA_HOME" />
        <fail message="Environment variable MYCORE_HOME is not set!"
            unless="MYCORE_HOME" />

        <path id="docportal.classpath">
            <pathelement location="${docportal.classes}" />
            <pathelement location="${docportal.config}" />
            <pathelement location="${docportal.schema}" />
            <pathelement location="${docportal.stylesheets}" />
            <fileset dir="${MYCORE_HOME}/lib" includes="*.jar" />
        	<fileset dir="${DOCPORTAL_SYSTEM}/lib" includes="*.jar,jetty/lib/*.jar" />
            <path refid="jdbc.classpath" />
            <path refid="xml.classpath" />
        </path>

        <path id="docportal.libpath">
            <dirset dir="${env.JAVA_HOME}" includes="bin bin/classic" />
            <path refid="jdbc.libpath" />
            <path refid="xml.libpath" />
        </path>

        <condition property="detected.os" value="unix">
            <os family="unix" />
        </condition>
        <condition property="detected.os" value="windows">
            <os family="dos" />
        </condition>
        <condition property="os.is.unix">
            <os family="unix" />
        </condition>
        <condition property="os.is.windows">
            <os family="dos" />
        </condition>

        <condition property="store.is.cm8">
            <equals arg1="${MCR.XMLStore.Type}" arg2="cm8" />
        </condition>

        <pathconvert targetos="${detected.os}"
            property="docportal.classpath.translated"
            refid="docportal.classpath" />
        <pathconvert targetos="${detected.os}"
            property="docportal.libpath.translated"
            refid="docportal.libpath" />	
    </target>
	
	<target name="jdbcstore.path.1" if="MCR.JDBCStore.BaseDir">
        <path id="jdbc.classpath">
            <fileset dir="${MCR.JDBCStore.BaseDir}"
                includes="_dummy_ ${MCR.JDBCStore.Jars}" />
            <dirset dir="${MCR.JDBCStore.BaseDir}"
                includes="_dummy_ ${MCR.JDBCStore.ClassesDirs}" />
        </path>
        <path id="jdbc.libpath">
            <dirset dir="${MCR.JDBCStore.BaseDir}"
                includes="_dummy_ ${MCR.JDBCStore.LibPath}" />
        </path>
    </target>

    <target name="jdbcstore.path.2" unless="MCR.JDBCStore.BaseDir">
        <path id="jdbc.classpath" />
        <path id="jdbc.libpath" />
    </target>

    <target name="xmlstore.path.1" if="MCR.XMLStore.BaseDir">
        <path id="xml.classpath">
            <fileset dir="${MCR.XMLStore.BaseDir}"
                includes="_dummy_ ${MCR.XMLStore.Jars}" />
            <dirset dir="${MCR.XMLStore.BaseDir}"
                includes="_dummy_ ${MCR.XMLStore.ClassesDirs}" />
        </path>
        <path id="xml.libpath">
            <dirset dir="${MCR.XMLStore.BaseDir}"
                includes="_dummy_ ${MCR.XMLStore.LibPath}" />
        </path>
    </target>

    <target name="xmlstore.path.2" unless="MCR.XMLStore.BaseDir">
        <path id="xml.classpath" />
        <path id="xml.libpath" />
    </target>

    <!-- System CLASSPATH is completely ignored! -->
    <property name="build.sysclasspath" value="ignore" />

    <!-- =================================================================== -->
    <!-- Create all XML schema files from the configuration file             -->
    <!-- =================================================================== -->

    <target name="create.schema" depends="init">

        <!-- Load the properties that define the XML metadata configuration files -->
        <loadproperties
            srcFile="${docportal.config}/mycore.properties">
            <filterchain>
                <linecontains>
                    <contains value="MCR.persistence_config_" />
                </linecontains>
            </filterchain>
        </loadproperties>

        <mkdir dir="${docportal.schema}" />

        <!-- Translate *.xml to *.xsd using MCRMetadataSchema.xsl -->
        <antcall target="do.transform">
            <param name="metadata.schema"
                value="${MCR.persistence_config_document}" />
        </antcall>
        <antcall target="do.transform">
            <param name="metadata.schema"
                value="${MCR.persistence_config_disshab}" />
        </antcall>
        <antcall target="do.transform">
            <param name="metadata.schema"
                value="${MCR.persistence_config_derivate}" />
        </antcall>
        <antcall target="do.transform">
            <param name="metadata.schema"
                value="${MCR.persistence_config_author}" />
        </antcall>
        <antcall target="do.transform">
            <param name="metadata.schema"
                value="${MCR.persistence_config_institution}" />
        </antcall>

        <move todir="${docportal.schema}">
            <fileset dir="${docportal.schema}"
                includes="${MCR.persistence_config_document} ${MCR.persistence_config_disshab} ${MCR.persistence_config_derivate} ${MCR.persistence_config_author} ${MCR.persistence_config_institution}" />
            <mapper type="glob" from="*.xml" to="*.xsd" />
        </move>
    </target>

    <target name="do.transform" depends="init">
        <echo>Transforming ${metadata.schema}...</echo>
        <java classname="org.apache.xalan.xslt.Process"
            dir="${docportal.config}" fork="yes"
            maxmemory="${java.maxmemory}"
            classpathref="docportal.classpath">
            <arg
                line="-IN ${metadata.schema} -XSL ${docportal.stylesheets}/MCRMetadataSchema.xsl -OUT ${docportal.schema}/${metadata.schema}" />
        </java>
    </target>

    <!-- =================================================================== -->
    <!-- Create local working directories                                    -->
    <!-- =================================================================== -->

    <target name="create.directories" depends="init">
        <mkdir dir="${MCR.Editor.FileUpload.TempStoragePath}" />
        <mkdir dir="${MCR.LogDirectory}" />    	
    	<mkdir dir="${MCR.Save.FileSystem}" />
        <mkdir dir="${MCR.WorkflowEngine.EditDirectory.author}" />
        <mkdir dir="${MCR.WorkflowEngine.EditDirectory.document}" />
    	<mkdir dir="${MCR.WorkflowEngine.EditDirectory.disshab}" />
        <mkdir dir="${MCR.WorkflowEngine.EditDirectory.institution}" />
        <mkdir dir="${MCR.WorkflowEngine.EditDirectory.user}" />    	
    	<mkdir dir="${MCR.WorkflowEngine.DeleteDirectory}" />
    </target>


    <!-- =================================================================== -->
    <!-- Create script bin/mycore.sh or mycore.cmd for CommandLineInterface  -->
    <!-- =================================================================== -->
	<target name="create.scripts" depends="init, script.windows, script.unix" description="Create commandline scripts" />

    <target name="script.windows" if="os.is.windows">
        <antcall target="script.windows.write">
            <param name="mycore.cmd.file" value="mycore.cmd" />
            <param name="mycore.cmd.class"
                value="org.mycore.frontend.cli.MCRCommandLineInterface %1 %2 %3 %4 %5 %6 %7 %8 %9" />
        </antcall>
        <antcall target="script.windows.write">
            <param name="mycore.cmd.file" value="listPlugins.cmd" />
            <param name="mycore.cmd.class"
                value="org.mycore.sample.PluginLister $*" />
        </antcall>
    </target>

    <target name="script.unix" if="os.is.unix">
        <antcall target="script.unix.write">
            <param name="mycore.cmd.file" value="mycore.sh" />
            <param name="mycore.cmd.class"
                value="org.mycore.frontend.cli.MCRCommandLineInterface $*" />
        </antcall>
        <antcall target="script.unix.write">
            <param name="mycore.cmd.file" value="listPlugins.sh" />
            <param name="mycore.cmd.class"
                value="org.mycore.sample.PluginLister $*" />
        </antcall>
    </target>
	
	
	  <target name="script.windows.write">
	    <property name="tmp.cmd.file" value="${DOCPORTAL_SYSTEM}/bin/${mycore.cmd.file}" />
	    <echo>Creating ${mycore.cmd.file} to invoke ${mycore.cmd.class}</echo>
	    <echo file="${tmp.cmd.file}" append="false">@echo off

	rem
	rem This batch file invokes the MyCoRe class
	rem ${mycore.cmd.class}
	rem Generated by ant using the target "scripts".
	rem

	set JAVA_HOME=${env.JAVA_HOME}
	set CLASSPATH=${docportal.classpath.translated}

	java -Xmx${java.maxmemory} ${mycore.cmd.class}
	    </echo>
	  </target>

	  <target name="script.unix.write">
	    <property name="tmp.cmd.file" value="${DOCPORTAL_SYSTEM}/bin/${mycore.cmd.file}" />
	    <echo>Creating ${mycore.cmd.file} to invoke ${mycore.cmd.class}</echo>
	    <echo file="${tmp.cmd.file}" append="false">#!/bin/bash

	#
	# This shell script invokes the MyCoRe class
	# ${mycore.cmd.class}
	# Generated by ant using the target "scripts".
	#

	JAVA_HOME=${env.JAVA_HOME}
	export JAVA_HOME

	CLASSPATH=${docportal.classpath.translated}
	export CLASSPATH

	LIBPATH=${docportal.libpath.translated}
	export LIBPATH

	LD_LIBRARY_PATH=$LIBPATH
	export LIBPATH

	$JAVA_HOME/bin/java -Xmx${java.maxmemory} ${mycore.cmd.class}
	    </echo>
	    <chmod file="${tmp.cmd.file}" perm="755" />
	  </target>

    <!-- =================================================================== -->
    <!-- Invokes the MyCoRe Command Line Interface with a given command      -->
    <!-- =================================================================== -->

    <target name="invoke.cli" depends="init">
        <java
            classname="org.mycore.frontend.cli.MCRCommandLineInterface"
            dir="${cli.directory}" fork="yes"
            maxmemory="${java.maxmemory}"
            classpathref="docportal.classpath" failonerror="true">
            <arg line="${cli.command}" />
            <env key="LIBPATH" value="${docportal.libpath.translated}" />
            <env key="LD_LIBRARY_PATH"
                value="${docportal.libpath.translated}" />
        </java>
    </target>

    <!-- =================================================================== -->
    <!-- Compiles all application classes                                    -->
    <!-- =================================================================== -->

    <target name="javac" >
        <echo>Compiling ${packages}</echo>
        <javac srcdir="${docportal.sources}"
               destdir="${docportal.classes}" 
        	   includes="${packages}"
               classpathref="docportal.classpath" 
        	   debug="${debug}"
               optimize="${optimize}" 
        	   target="${javatarget}"
               source="${sourcerelease}" 
        	   encoding="${sourceencoding}"
               fork="yes"  
        	verbose="true"
               deprecation="${deprecation}" />
        <echo>
        	---------------------------------------------------------
        </echo>
    </target>


    <target name="compile"
        depends="compile_base,compile_common, compile_filters, compile_frontend_admin, compile_frontend_jsp_format, compile_frontend_jsp, compile_frontend_jsp_nav, compile_frontend_jsp_query, compile_servlets, compile_workflow, compile_backend_query, compile_backend_hibernate, compile_services_oai, compile_demo, compile_workflowengine, compile_frontend_editor_helper, compile_indexbrowser" />

    <target name="compile_base" depends="init" >
        <mkdir dir="${docportal.classes}" />
    </target>

    <target name="compile_filters">
        <echo>Compiling the filters package</echo>
        <antcall target="javac">
            <param name="packages" value="org/mycore/filters/*" />
        </antcall>
    </target>		
	
    <target name="compile_indexbrowser">
        <echo>Compiling the filters package</echo>
        <antcall target="javac">
            <param name="packages" value="org/mycore/frontend/indexbrowser/*" />
        </antcall>
    </target>	
	
    <target name="compile_services_oai">
        <echo>Compiling the services oai package</echo>
        <antcall target="javac">
            <param name="packages" value="org/mycore/services/oai/*" />
        </antcall>
    </target>
    <target name="compile_frontend_jsp_format">
        <echo>Compiling the frontend jsp navigation package</echo>
        <antcall target="javac">
            <param name="packages" value="org/mycore/frontend/jsp/format/*" />
        </antcall>
    </target>		
    <target name="compile_frontend_jsp">
        <echo>Compiling the frontend jsp navigation package</echo>
        <antcall target="javac">
            <param name="packages" value="org/mycore/frontend/jsp/*" />
        </antcall>
    </target>	
    <target name="compile_frontend_admin">
        <echo>Compiling the frontend admin package</echo>
        <antcall target="javac">
            <param name="packages" value="org/mycore/frontend/admin/*" />
        </antcall>
    </target>	
    <target name="compile_frontend_editor_helper">
        <echo>Compiling the frontend editor helper package</echo>
        <antcall target="javac">
            <param name="packages" value="org/mycore/frontend/editor/helper/*" />
        </antcall>
    </target>	
    <target name="compile_frontend_jsp_nav">
        <echo>Compiling the frontend jsp navigation package</echo>
        <antcall target="javac">
            <param name="packages" value="org/mycore/frontend/jsp/navigation/**" />
        </antcall>
    </target>
    <target name="compile_frontend_jsp_query">
        <echo>Compiling the frontend jsp query package</echo>
        <antcall target="javac">
            <param name="packages" value="org/mycore/frontend/jsp/query/**" />
        </antcall>
    </target>	
    <target name="compile_common">
        <echo>Compiling the common package</echo>
        <antcall target="javac">
            <param name="packages" value="org/mycore/common/*" />
        </antcall>
    </target>
    <target name="compile_servlets">
        <echo>Compiling the servlets</echo>
        <antcall target="javac">
            <param name="packages"
                value="org/mycore/frontend/servlets/**" />
        </antcall>
    </target>
    <target name="compile_workflow">
        <echo>Compiling the servlets</echo>
        <antcall target="javac">
            <param name="packages"
                value="org/mycore/frontend/workflow/**" />
        </antcall>
    </target>
    <target name="compile_services_nbn">
        <echo>Compiling the mediaTUM-Version of MCRNBN</echo>
        <antcall target="javac">
            <param name="packages" value="org/mycore/services/nbn/**" />
        </antcall>
    </target>
    <target name="compile_backend_query">
        <echo>Compiling the Hibernate Query Mapping Table</echo>
        <antcall target="javac">
            <param name="packages" value="org/mycore/backend/query/**" />
        </antcall>
    </target>
    <target name="compile_backend_hibernate">
        <echo>Compiling the Hibernate Tables</echo>
        <antcall target="javac">
            <param name="packages"
                value="org/mycore/backend/hibernate/tables/**" />
        </antcall>
    </target>
    <target name="compile_demo">
        <echo>Compiling the start class for the demo out of the box</echo>
        <antcall target="javac">
            <param name="packages" value="org/mycore/start/demo/*" />
        </antcall>
    </target>	
    <target name="compile_workflowengine">
        <echo>Compiling the classes for the workflowengine</echo>
        <antcall target="javac">
            <param name="packages" value="org/mycore/frontend/workflowengine/**" />
        </antcall>
    </target>		


    <!-- =================================================================== -->
    <!-- Creates a docportal-for-*.jar file containing all compiled classes     -->
    <!-- =================================================================== -->

    <target name="jar" depends="compile"
        description="creates lib/docportal-for-*.jar">
        <echo>
            Creating docportal-for-${MCR.XMLStore.Type}.jar containing
            all compiled classes. ..
        </echo>
        <jar
            destfile="${docportal.lib}/docportal-for-${MCR.XMLStore.Type}.jar">
            <fileset dir="${docportal.classes}" includes="**/*.class" />
            <fileset dir="${docportal.schema}" includes="*.xsd *.dtd" />
        	<fileset dir="${MYCORE_HOME}/lib" includes="*.dtd" />
        </jar>
        <echo>
            ---------------------------------------------------------
        </echo>
    </target>

    <!-- =================================================================== -->
    <!-- Create all metadata stores for XML mapped stores                    -->
    <!-- =================================================================== -->

    <target name="create.metastore"
        depends="init,create.hibernate,create.metastore.author,create.metastore.document,create.metastore.institution,create.metastore.derivate" >
    	<echo>	create.metastore finished </echo>
    </target>

    <target name="create.hibernate" depends="init">
        <antcall target="invoke.cli">
            <param name="cli.directory" value="${DOCPORTAL_SYSTEM}" />
            <param name="cli.command" value="init hibernate" />
        </antcall>
    </target>

	<target name="create.metastore.author" depends="init">
        <antcall target="invoke.cli">
            <param name="cli.directory" value="${DOCPORTAL_SYSTEM}" />
            <param name="cli.command"
                value="create database for author" />
        </antcall>
    </target>

    <target name="create.metastore.document" depends="init">
        <antcall target="invoke.cli">
            <param name="cli.directory" value="${DOCPORTAL_SYSTEM}" />
            <param name="cli.command"
                value="create database for document" />
        </antcall>
    </target>

    <target name="create.metastore.institution" depends="init">
        <antcall target="invoke.cli">
            <param name="cli.directory" value="${DOCPORTAL_SYSTEM}" />
            <param name="cli.command"
                value="create database for institution" />
        </antcall>
    </target>

    <target name="create.metastore.derivate" depends="init">
        <antcall target="invoke.cli">
            <param name="cli.directory" value="${DOCPORTAL_SYSTEM}" />
            <param name="cli.command"
                value="create database for derivate" />
        </antcall>
    </target>

    <!-- =================================================================== -->
    <!-- Load all classifications                                            -->
    <!-- =================================================================== -->

    <target name="create.class" depends="init">
        <property name="commands.file" value="${DOCPORTAL_SYSTEM}/commands.txt" />
        <delete file="${commands.file}" />
        <echo file="${commands.file}" append="false">

            update all classifications from directory ${docportal.content}/classification

        </echo>
        <antcall target="invoke.cli">
            <param name="cli.directory" value="${DOCPORTAL_SYSTEM}" />
            <param name="cli.command" value="process ${commands.file}" />
        </antcall>
        <delete file="${commands.file}" />
    </target>

    <!-- =================================================================== -->
    <!-- Generates the keys to sign the applets                              -->
    <!-- =================================================================== -->

    <target name="create.genkeys" depends="init">
        <echo>

            Generating a key pair for signing applets ...
        </echo>
        <mkdir dir="${SIGN.KeyStore}" />
        <genkey alias="${SIGN.Alias}" keystore="${SIGN.KeyStore}/keys"
            storepass="${SIGN.Password}" keypass="${SIGN.Password}"
            validity="${SIGN.Validity}">
            <dname>
                <param name="CN" value="${SIGN.Name}" />
                <param name="OU" value="${SIGN.OrgUnit}" />
                <param name="O" value="${SIGN.Organization}" />
                <param name="C" value="${SIGN.Country}" />
            </dname>
        </genkey>
    </target>

    <!-- =================================================================== -->
    <!-- merge the web.xml from core with web.xml of the module              -->
    <!-- =================================================================== -->
		
    <target name="do.merge" if="web.xml.present">

      <copy file="${docportal.webapps}/WEB-INF/web.xml" tofile="${docportal.webapps}/WEB-INF/web1.xml" />
      <!--<copy file="${web.xml.file}" tofile="${docportal.webapps}/WEB-INF/web2.xml" />-->
	  <loadfile srcfile="${web.xml.file}" property="tidy.web2.xml">
			<filterchain>
				<replaceregex pattern="&lt;!DOCTYPE[^&gt;].*&gt;" replace="" flags="gi"/>
			</filterchain>
	  </loadfile> 
      <echo file="${docportal.webapps}/WEB-INF/web2.xml" append="false">${tidy.web2.xml}</echo>
    	
      <copy file="${docportal.stylesheets}/merge-web-xml.xsl" todir="${docportal.webapps}/WEB-INF" />
      
   	  <java classname="org.apache.xalan.xslt.Process" fork="yes" classpathref="docportal.classpath" dir="${docportal.webapps}/WEB-INF">
        <arg line="-IN web2.xml -XSL merge-web-xml.xsl -OUT web.xml" />
      </java>
      <delete file="${docportal.webapps}/WEB-INF/web1.xml" />
      <delete file="${docportal.webapps}/WEB-INF/web2.xml" />
      <delete file="${docportal.webapps}/WEB-INF/merge-web-xml.xsl" />
    </target>	

	<target name="test.merge">
	   	  <java classname="org.apache.xalan.xslt.Process" fork="yes" classpathref="docportal.classpath" dir="${docportal.webapps}/WEB-INF">
	        <arg line="-IN web2.xml -XSL merge-web-xml.xsl -OUT web.xml" />
	      </java>		
	</target>
    <!-- =================================================================== -->
    <!-- Build the web application directory and copy webpages               -->
    <!-- =================================================================== -->

    <target name="webapps"
        depends="init,webapps.base,webapps.useradmin, webapps.jsp, webapps.webservices">
        <echo>
            Creating web application in directory ${docportal.webapps}
        </echo>
    </target>

	<target name="webapps.webservices">
	  	     <echo>
	  	 
	  	       Add the module Webservices
	  	     </echo>
	  	     <subant target="webapps" inheritall="true" inheritrefs="true">
               <property name="webapps-libdir" value="${docportal.webapps}/WEB-INF/lib"/>
	  	       <property name="modules-home" value="${MYCORE_HOME}" />
	  	       <fileset file="${MYCORE_HOME}/modules/module-webservices/build.xml" />
	  	     </subant>
	  	         <!-- merge the web.xml of the module to the application -->
	  	         <available property="web.xml.present" file="${mycore.modules}/module-webservices/config/web.xml" />
	  	     <antcall target="do.merge" >
	  	       <param name="web.xml.file"   value="${mycore.modules}/module-webservices/config/web.xml" />
	  	     </antcall>
    </target>	
	
    <target name="webapps.jsp">
        <copy todir="${docportal.webapps}">
            <fileset dir="${docportal.webpages}">
                <include name="**/*.properties" />
                <include name="**/*.jsp" />
                <include name="**/*.jspx" />            	
                <include name="**/*.xml" />
                <include name="**/*.xsl" />
                <include name="**/*.html" />
                <include name="**/*.tld" />
                <include name="**/*.dtd" />
                <include name="**/*.css" />
                <include name="**/*.js" />				
                <include name="**/*.gif" />
                <include name="**/*.ico" />            	
                <include name="**/*.png" />
                <include name="**/*.jpg" />
                <include name="**/*.jar" />
                <include name="**/*.swf" />
                <exclude name="**/CVS/**/*.*" />
                <exclude name="**/.svn/**/*.*" />
                <exclude name="**/web.xml" />
            </fileset>
        </copy>
        <copy todir="${docportal.webapps}/content/webcontent">
            <fileset dir="${docportal.languages}/webcontent" />
		</copy>
    </target>

	  <target name="webapps.useradmin">

	    <!-- Create necessary directories  -->
	    <mkdir dir="${docportal.webapps}"/>
	    <mkdir dir="${docportal.webapps}/editor"/>

	    <!-- Copy files  -->
	    <copy todir="${docportal.webapps}">
	      <fileset file="${MYCORE_HOME}/modules/module-useradmin/webapps/*.xml"/>
	    </copy>
	    <copy todir="${docportal.webapps}/editor">
	      <fileset file="${MYCORE_HOME}/modules/module-useradmin/webapps/editor/*.xml"/>
	    </copy>
	  </target>
		
    <target name="webapps.base">

        <!-- Create necessary directories  -->
        <mkdir dir="${docportal.webapps}" />
        <mkdir dir="${docportal.webapps}/editor" />
        <mkdir dir="${docportal.webapps}/applet" />
        <mkdir dir="${docportal.webapps}/WEB-INF" />
        <mkdir dir="${docportal.webapps}/WEB-INF/classes" />
        <mkdir dir="${docportal.webapps}/WEB-INF/lib" />
        <mkdir dir="${docportal.webapps}/WEB-INF/stylesheets" />
    	
    	<mkdir dir="${DOCPORTAL_SYSTEM}/jettywork" />

        <!-- Copy editor stylesheets from MyCoRe and the DocPortal Application -->
    	<!--
        <copy file="${MYCORE_HOME}/stylesheets/MCRJDOMSearch.xsl"
            todir="${docportal.webapps}/WEB-INF/classes" />
        -->            
        <copy file="${MYCORE_HOME}/stylesheets/editor/editor.xsl"
            todir="${docportal.webapps}/WEB-INF/stylesheets" />
        <copy
            file="${MYCORE_HOME}/stylesheets/editor/editor-common.xsl"
            todir="${docportal.webapps}/WEB-INF/stylesheets" />
        <copy file="${MYCORE_HOME}/stylesheets/editor/helpPopup.xsl"
            todir="${docportal.webapps}/WEB-INF/stylesheets" />
        <copy
            file="${MYCORE_HOME}/stylesheets/editor/imports-help-popup.xsl"
            todir="${docportal.webapps}/WEB-INF/stylesheets" />
    	<!--
        <copy
            file="${MYCORE_HOME}/stylesheets/editor/mcr_results-classif-to-items.xsl"
            todir="${docportal.webapps}/WEB-INF/stylesheets" />
        <copy
            file="${MYCORE_HOME}/stylesheets/editor/mcr_results-authors-to-items.xsl"
            todir="${docportal.webapps}/WEB-INF/stylesheets" />
        <copy
            file="${MYCORE_HOME}/stylesheets/editor/mcr_results-inst-to-items.xsl"
            todir="${docportal.webapps}/WEB-INF/stylesheets" />
		-->
        <!-- 
            <copy file="${docportal.stylesheets}/editor/editor-config.xsl" todir="${docportal.webapps}/WEB-INF/stylesheets"/>
        -->

        <!-- Copy the files from various directories to build the webapps -->
    	  <!--     <copy todir="${docportal.webapps}">
              	
                <fileset dir="${docportal.webpages}"/>
                <fileset dir="${docportal.config}" includes="FileContentTypes.xml" />
                <fileset dir="${docportal.doc}" includes="DocPortal.*" />
                <fileset dir="${docportal.doc}" includes="Anleitung_Autor_Dokumente.*" />
                <fileset dir="${docportal.doc}" includes="Anleitung_Bearbeiter_Documente.*" />
        
            <fileset
                dir="${MYCORE_HOME}/documentation/StartingGuide"
                includes="StartingGuide.*" />
            <fileset dir="${MYCORE_HOME}/documentation/UserGuide"
                includes="UserGuide.*" />
            <fileset dir="${MYCORE_HOME}/documentation/ProgGuide"
                includes="ProgGuide.*" />    
        </copy> -->
        <!--  	
            <copy todir="${docportal.webapps}" overwrite="true">
            <fileset dir="${docportal.webpages}" >
            <exclude name="**/*.xsl" />				      	
            </fileset>
            </copy>
        -->
        <!--  	
            <copy file="${DOCPORTAL_SYSTEM}/webpages/index.html" todir="${DOCPORTAL_SYSTEM}/webapps" overwrite="true" />				
        -->
        <!--  	
            <copy todir="${docportal.webapps}/editor">
            <fileset dir="${docportal.config}" includes="editor-*.xml" />
            <fileset dir="${docportal.config}" includes="imports-*.xml" />
            </copy>
        -->
        <copy todir="${docportal.webapps}/WEB-INF">
            <fileset dir="${docportal.config}"
                includes="web.xml ibm*.xmi" />
        </copy>
        <copy todir="${docportal.webapps}/WEB-INF/lib">
            <fileset dir="${DOCPORTAL_SYSTEM}/lib" includes="*.jar" excludes="jsp-api*.jar" />
            <fileset dir="${MYCORE_HOME}/lib" includes="*.jar"
                excludes="servlet-api*,standalone-compiler*" />
        </copy>
        <copy todir="${docportal.webapps}/WEB-INF/classes" overwrite="true">
            <!-- <fileset dir="${docportal.classes}" /> -->
            <fileset dir="${docportal.config}" excludes="user/*" />
            <fileset dir="${docportal.schema}" />
            <fileset dir="${docportal.stylesheets}"
                includes="mycoreobject-*-to-workflow.xsl" />
            <fileset
                dir="${docportal.webpages}/content/results-config"
                includes="*.xml" />
        </copy>
    	<echo> Concat messagebundles to one messages_{locale}.properties</echo>
    	<taskdef name="mergepropertyfiles" classname="org.mycore.ant.customtasks.MergeProperties" classpath="${DOCPORTAL_HOME}/lib/ant-mycore.jar" />  
    	<mergepropertyfiles basefile="${docportal.languages}/messages_de.properties" 
    						deltafile="${docportal.languages}/mymessages_de.properties" 
    						tofile="${docportal.webapps}/WEB-INF/classes/messages_de.properties"/>

    	<mergepropertyfiles basefile="${docportal.languages}/messages_en.properties" 
    						deltafile="${docportal.languages}/mymessages_en.properties" 
    						tofile="${docportal.webapps}/WEB-INF/classes/messages_en.properties"/>

    	<!--
    	<concat destfile="${docportal.webapps}/WEB-INF/classes/messages_de.properties">
    		<filelist id="messagebundles_de" 
  		    		dir="${docportal.languages}"
    		    	files="mymessages_de.properties,messages_de.properties"/> 
    	</concat>
    	<concat destfile="${docportal.webapps}/WEB-INF/classes/messages_en.properties" >
    		<filelist  id="messagebundles_en" 
    			dir="${docportal.languages}"
    		    files="mymessages_en.properties,messages_en.properties"/> 
    	</concat> -->
    	
        <copy todir="${docportal.webapps}/WEB-INF/stylesheets"
            flatten="true">
            <fileset dir="${MYCORE_HOME}/stylesheets"
                includes="**/*.xsl" />
        </copy>
	   <copy todir="${docportal.webapps}/WEB-INF/stylesheets"
	            flatten="true" overwrite="true">
	        	<fileset dir="${docportal.stylesheets}" includes="**/*.xsl" />
	   </copy>

        <echo>

            Building the upload applet used for file uploads...
        </echo>
        <jar jarfile="${docportal.webapps}/applet/unsigned.jar">
            <fileset dir="${MYCORE_HOME}/classes">
                <include
                    name="org/mycore/frontend/fileupload/MCRUploadAppl*.class" />
                <include
                    name="org/mycore/frontend/fileupload/MCRUploadComm*r.class" />
                <include
                    name="org/mycore/frontend/fileupload/MCRUploadExce*.class" />
                <include
                    name="org/mycore/frontend/fileupload/MCRUploadProg*.class" />
            </fileset>
        </jar>
        <loadproperties
            srcFile="${docportal.config}/mycore.properties">
            <filterchain>
                <linecontains>
                    <contains value="SIGN." />
                </linecontains>
            </filterchain>
        </loadproperties>
       <signjar jar="${docportal.webapps}/applet/unsigned.jar"
            signedjar="${docportal.webapps}/applet/upload.jar" alias="${SIGN.Alias}"
            keystore="${SIGN.KeyStore}/keys"
            storepass="${SIGN.Password}" keypass="${SIGN.Password}" />
        <delete file="${docportal.webapps}/applet/unsigned.jar" />
        <chmod dir="${docportal.webapps}/applet" perm="ugo+r" />

        <antcall target="copy.webapp.shared.jars" />
        <antcall target="webapp.info.shared.jars" />
        <antcall target="webapp.info.unix" />

        <echo>Updating modules...</echo>
        <subant target="webapps" inheritall="true" inheritrefs="true">
            <fileset dir="." includes="modules/module-*/build.xml" />
        </subant>
    	
        <!-- Copy / Unpack fckEditor files (WYSIWYG HTML Editor) -->
        <unzip src="${MYCORE_HOME}/lib/fckEditor.zip" dest="${docportal.webapps}" />
        <copy file="${MYCORE_HOME}/config/fckconfig.js" todir="${docportal.webapps}/fck" />

    </target>

    <target name="webapp.info.shared.jars"
        unless="MCR.WebAppServer.SharedJarsDir">
        <echo>
            NOTE: MyCoRe copied the jar files listed above as specified
            by MCR.XMLStore.Jars and MCR.JDBCStore.Jars to the web
            applicaton WEB-INF/lib directory. Your build.properties
            configuration file lists them as needed to connect to your
            local XML database and/or JDBC database system. If these
            files load native libraries to connect to the database, this
            may cause trouble at runtime when you run multiple web
            applications in the same JVM or use dynamic servlet
            reloading. In this case, put these jars in a separate
            directory where they are just loaded once, for tomcat for
            example move these files to the directory 'shared'. Set the
            propery MCR.WebAppServer.SharedJarsDir in build.properties
            to control this.
        </echo>
    </target>

    <target name="webapp.info.unix" if="os.is.unix">
        <echo>
            NOTE: For UNIX systems like AIX, Linux, set the environment
            variables LIBPATH and LD_LIBRARY_PATH as needed for your
            database system. From your configuration in
            build.properties, MyCoRe suggests to set these variables as
            follows:

            LIBPATH=${docportal.libpath.translated}
            LD_LIBRARY_PATH=$LIBPATH

        </echo>
    </target>

    <target name="copy.webapp.shared.jars">
        <delete dir="${docportal.webapps}/WEB-INF/lib/tmp" />
        <mkdir dir="${docportal.webapps}/WEB-INF/lib/tmp" />
        <antcall target="copy.webapp.jdbc" />
        <antcall target="copy.webapp.xml" />
        <condition property="shared.jars.dir"
            value="${MCR.WebAppServer.SharedJarsDir}">
            <available file="${MCR.WebAppServer.SharedJarsDir}"
                type="dir" />
        </condition>
        <condition property="shared.jars.dir"
            value="${docportal.webapps}/WEB-INF/lib">
            <not>
                <available file="${MCR.WebAppServer.SharedJarsDir}"
                    type="dir" />
            </not>
        </condition>
        <antcall target="list.jars.unix" />
        <antcall target="list.jars.windows" />
        <copy toDir="${shared.jars.dir}">
            <fileset dir="${docportal.webapps}/WEB-INF/lib/tmp" />
        </copy>
        <delete dir="${docportal.webapps}/WEB-INF/lib/tmp" />
    </target>

    <target name="list.jars.unix" if="os.is.unix">
        <exec dir="${docportal.webapps}/WEB-INF/lib/tmp"
            executable="ls" />
    </target>

    <target name="list.jars.windows" if="os.is.windows">
        <exec dir="${docportal.webapps}/WEB-INF/lib/tmp"
            executable="cmd.exe">
            <arg line="/c dir *.*" />
        </exec>
    </target>
	

    <target name="copy.webapp.jdbc" if="MCR.JDBCStore.BaseDir">
        <copy todir="${docportal.webapps}/WEB-INF/lib/tmp"
            flatten="true">
            <fileset dir="${MCR.JDBCStore.BaseDir}"
                includes="_dummy_ ${MCR.JDBCStore.Jars}" />
        </copy>
    </target>

    <target name="copy.webapp.xml" if="MCR.XMLStore.BaseDir">
        <copy todir="${docportal.webapps}/WEB-INF/lib/tmp"
            flatten="true">
            <fileset dir="${MCR.XMLStore.BaseDir}"
                includes="_dummy_ ${MCR.XMLStore.Jars}" />
        </copy>
    </target>

    <!-- =================================================================== -->
    <!-- Build a web application archive                                     -->
    <!-- =================================================================== -->

    <target name="war" depends="clean, create.schema, jar, create.taglib, webapps">
        <jar jarfile="mycoresample.war" basedir="${docportal.webapps}" />
    </target>
	
	<target name="fastdevelopwar" depends="jar,create.taglib">
		<copy todir="${docportal.WEB-INF}/lib" file="${docportal.lib}/mycore-taglibs.jar" overwrite="true" />
		<copy todir="${docportal.WEB-INF}/classes" overwrite="true" >		
			<fileset dir="${docportal.classes}" />
		</copy>
		<copy todir="${docportal.webapps}" overwrite="true">
			<fileset dir="${docportal.webpages}" />
		</copy>
    </target>	
	
	<!-- =================================================================== -->
    <!-- Build the web application and copy it to a special folder           -->
    <!-- =================================================================== -->	
	
    <target name="webtools" depends="clean, create.schema, jar, create.taglib, webapps">
    	<mkdir dir="../globalwebapps" />
    	<delete includeEmptyDirs="true">
    		<fileset dir="../globalwebapps">
    			<include name="/**" />
    		</fileset>
    	</delete>
		<copy todir="../globalwebapps" overwrite="true">
			<fileset dir="${docportal.webapps}" includes="**" />
    	</copy>
    </target>	


    <!-- =================================================================== -->
    <!-- Remove the user created directories and files                       -->
    <!-- =================================================================== -->

    <target name="clean">
    	<delete dir="${DOCPORTAL_SYSTEM}" />
    </target>

    <!-- =================================================================== -->
    <!-- Update current working directory from CVS repository                -->
    <!-- =================================================================== -->

    <target name="update">
        <cvs cvsroot="${CVSRoot}" command="update -dP"
            dest="${basedir}" />
    </target>

    <!-- =================================================================== -->
    <!-- Do work after a CVS commit...                                       -->
    <!-- =================================================================== -->

    <target name="postcommit">
        <antcall target="update" />
        <antcall target="javadocs" />
        <antcall target="changelog" />
    </target>

    <!-- =================================================================== -->
    <!-- Build CVS ChangeLog                                                 -->
    <!-- =================================================================== -->

    <target name="changelog" depends="init">
        <echo>

            Building CVS ChangeLog, please be patient...
        </echo>

        <tstamp>
            <format property="year" pattern="yyyy" />
        </tstamp>

        <mkdir dir="${basedir}/changelogs" />
        <mkdir dir="${basedir}/changelogs/${year}" />

        <exec
            executable="/mcr/applications/cvschangelogbuilder-2.0/cvschangelogbuilder.pl">
            <arg value="-module=jspdocportal" />
            <arg value="-output=buildhtmlreport" />
            <arg
                value="-viewcvsurl=http://www.mycore.de/cvs/viewcvs.cgi" />
            <arg value="-dir=${basedir}/changelogs/${year}" />
        </exec>

        <move
            file="${basedir}/changelogs/${year}/cvschangelogbuilder_jspdocportal.html"
            tofile="${basedir}/changelogs/${year}/index.html" />

        <chmod dir="${basedir}/changelogs" perm="ugo+rx" />
        <chmod dir="${basedir}/changelogs" type="dir" perm="ugo+rx"
            includes="**/*" />
        <chmod dir="${basedir}/changelogs" type="file" perm="ugo+r"
            includes="**/*" />
    </target>

    <!-- =================================================================== -->
    <!-- Check if javadocs and pdf are up to date or outdated                -->
    <!-- =================================================================== -->

    <target name="up2date" depends="init">

        <path id="javadocs.classpath">
            <fileset dir="${docportal.lib}" includes="*.jar" />
            <fileset dir="${MYCORE_HOME}/lib" includes="*.jar" />
        </path>

        <condition property="javadocs.outdated">
            <not>
                <uptodate>
                    <srcfiles dir="${docportal.sources}"
                        includes="**/*.java" />
                    <mapper type="merge"
                        to="${docportal.javadocs}/overview-tree.html" />
                </uptodate>
            </not>
        </condition>
    </target>

    <!-- =================================================================== -->
    <!-- Create the HTML JavaDocs from sources                               -->
    <!-- =================================================================== -->

    <target name="javadocs" depends="up2date" if="javadocs.outdated"
        description="creates JavaDoc API documentation in HTML format">
        <echo>Building the DocPortal JavaDoc API documentation...</echo>

        <mkdir dir="${docportal.javadocs}" />
        <javadoc packagenames="org.mycore.*"
            sourcepath="${docportal.sources}"
            destdir="${docportal.javadocs}"
            classpathref="javadocs.classpath" author="true"
            version="true" use="true" access="package" splitindex="true"
            linksource="true"
            windowtitle="DocPortal JavaDoc Documentation"
            doctitle="DocPortal Source Code JavaDoc Documentation">
            <group title="DocPortal Datamodel"
                packages="org.mycore.datamodel*" />
            <group title="DocPortal Persistence Backend Implementations"
                packages="org.mycore.backend*" />
            <group title="DocPortal User Interface Frontend"
                packages="org.mycore.frontend*" />
            <group title="DocPortal Sample"
                packages="org.mycore.sample*" />

            <link href="http://java.sun.com/j2se/1.4.2/docs/api/" />
            <link
                href="http://www.mycore.de/workdir/mycore/documentation/html" />
            <link
                href="http://www.mycore.de/library/cm-eip/eip-8.2-javadocs/" />
            <link
                href="http://jakarta.apache.org/tomcat/tomcat-5.0-doc/servletapi" />
            <link
                href="http://java.sun.com/xml/jaxp/dist/1.1/docs/api/" />
            <link href="http://www.jdom.org/docs/apidocs" />
            <link href="http://xmldb-org.sourceforge.net/xapi/api/" />
            <link href="http://logging.apache.org/log4j/docs/api/" />
            <link href="http://jakarta.apache.org/lucene/docs/api/" />
        </javadoc>
        <echo>
            ---------------------------------------------------------
        </echo>

        <chmod dir="${docportal.javadocs}" type="file" perm="ugo+r"
            includes="**/*" />
        <chmod dir="${docportal.javadocs}" type="dir" perm="ugo+rx"
            includes="**/*" />
    </target>

    <!-- =================================================================== -->
    <!-- Load privileges, users and groups into database                     -->
    <!-- =================================================================== -->

    <target name="create.users" depends="init">
        <property name="commands.file" value="${basedir}/commands.txt" />
        <echo file="${commands.file}" append="false">
            load permissions data from file permissions.xml

      	    init superuser

            change to user root with alleswirdgut
      			
            create group data from file group_adminall.xml        	
        	
        	create group data from file group_adminauthor.xml
        	create group data from file group_createauthor.xml
        	
        	create group data from file group_admindisshab.xml
        	create group data from file group_createdisshab.xml

        	create group data from file group_admininstitution.xml
        	create group data from file group_createinstitution.xml
        	
        	create group data from file group_adminpublication.xml
        	create group data from file group_createpublication.xml
        	
        	create group data from file group_adminclassification.xml
        	
        	create group data from file group_adminuser.xml
        	create group data from file group_adminwebcontent.xml
        	
        	create user data from file user_administrator.xml  
        	create user data from file user_editorUser.xml
        	create user data from file user_editorClass.xml
        	create user data from file user_editorWeb.xml

        	create user data from file user_authorA.xml
        	create user data from file user_authorI.xml
        	create user data from file user_authorP.xml
        	create user data from file user_authorD.xml

        	create user data from file user_editorA.xml
        	create user data from file user_editorI.xml
        	create user data from file user_editorP.xml
        	create user data from file user_editorD.xml

        	
            check user data consistency
        </echo>
        <antcall target="invoke.cli">
            <param name="cli.directory"
                value="${docportal.config}/user" />
            <param name="cli.command" value="process ${commands.file}" />
        </antcall>
        <delete file="${commands.file}" />
    </target>

    <!-- =================================================================== -->
    <!-- Start and Stop the HSQLDB Database                                  -->
    <!-- =================================================================== -->

    <property name="docportal.hsqldb-datadir"
        value="${MCR.persistence_sql_data_directory}" />
    <target name="hsqldbstart" depends="init">
        <echo message="Starting HSQLDB Server" />
        <echo file="hsqlport.tmp" append="false">
            hsqlport=${MCR.hibernate.connection.url}
        </echo>
        <loadproperties srcFile="hsqlport.tmp">
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern="hsqlport=.*:([0-9]+)$"
                        replace="hsqlport=\1" flags='g' />
                </tokenfilter>
            </filterchain>
        </loadproperties>
        <mkdir dir="${docportal.hsqldb-datadir}" />
        <java dir="${docportal.hsqldb-datadir}"
            classname="org.hsqldb.Server"
            classpathref="docportal.classpath" fork="yes">
            <arg value="-database.0" />
            <arg value="${MCR.persistence_sql_data_directory}/${MCR.persistence_sql_database_name}" />
        	<arg value="-dbname.0" />
            <arg value="${MCR.persistence_sql_database_name}" />
        	<arg value="-database.1" />
        	<arg value="${MCR.persistence_sql_data_directory}/${MCR.persistence_workflow_sql_database_name}" />
            <arg value="-dbname.1" />
            <arg value="${MCR.persistence_workflow_sql_database_name}" />        	
            <arg value="-port" />
            <arg value="${hsqlport}" />
        </java>
        <delete file="hsqlport.tmp" />
    </target>


    <target name="hsqldbstop">
        <echo message="Stopping HSQLDB Server" />
        <echo file="connectionBase.tmp" append="false">
                connectionBase=${MCR.hibernate.connection.url}
       </echo>
       <loadproperties srcFile="connectionBase.tmp">
			<filterchain>
                    <tokenfilter>
                        <replaceregex pattern="connectionBase=(.*:[0-9]+)/.*$"
                            replace="connectionBase=\1" flags='g' />
                    </tokenfilter>
            </filterchain>
        </loadproperties>   
    	<echo>connectionBase:${connectionBase}</echo>
        <java dir="${docportal.hsqldb-datadir}"
            classname="org.hsqldb.util.ShutdownServer" fork="yes"
            classpathref="docportal.classpath">
            <arg value="-url" />
            <arg value="${connectionBase}/${MCR.persistence_sql_database_name}" />
        </java>
        <java dir="${docportal.hsqldb-datadir}"
            classname="org.hsqldb.util.ShutdownServer" fork="yes"
            classpathref="docportal.classpath">
            <arg value="-url" />
            <arg value="${connectionBase}/${MCR.persistence_workflow_sql_database_name}" />
        </java>    	
    	<delete file="connectionBase.tmp" />
    </target>
	
	<target name="jettystart">
		<echo message="Starting Jetty Server" />
		<java jar="${docportal.lib}/jetty/start.jar" fork="yes">
			<jvmarg value="-Djetty.home=${docportal.lib}/jetty"/>
			<jvmarg value="-Djava.home=${env.JAVA_HOME}"/>
			<arg value="${docportal.lib}/jetty/webapp.xml" />
		</java>
	</target>
	
	<target name="jettystop">
		<java jar="${docportal.lib}/jetty/stop.jar" fork="yes">
			<jvmarg value="-Djetty.home=${docportal.lib}/jetty"/>
		</java>		
	</target>

	<target name="jettypreparelib">
		<move file="${docportal.webapps}/WEB-INF/lib/xercesImpl_2_7_1.jar" tofile="${docportal.webapps}/WEB-INF/lib/xercesImpl_2_7_1.jar.notallowedinjetty"/>
		<move file="${docportal.webapps}/WEB-INF/lib/xml-apis.jar" tofile="${docportal.webapps}/WEB-INF/lib/xml-apis.jar.notallowedinjetty"/>		
	</target>
	
	<target name="jettyrepairlib">
		<move file="${docportal.webapps}/WEB-INF/lib/xercesImpl_2_7_1.jar.notallowedinjetty" tofile="${docportal.webapps}/WEB-INF/lib/xercesImpl_2_7_1.jar"/>
		<move file="${docportal.webapps}/WEB-INF/lib/xml-apis.jar.notallowedinjetty" tofile="${docportal.webapps}/WEB-INF/lib/xml-apis.jar"/>					
	</target>
	
	<target name="demo.jar" depends="compile_demo">
	    <jar jarfile="../demo.jar"  >
	       <manifest>
	         <attribute name="Main-Class" value="org.mycore.start.demo.Main"/>
	       	 <attribute name="Class-Path" value="mycore/lib/BrowserLauncher2.jar mycore-working/lib/jetty/start.jar mycore-working/lib/jetty/stop.jar"/>
	       </manifest>
           <fileset dir="${docportal.classes}" includes="org/mycore/start/demo/**" />
	    </jar>
    </target>		

	<target name="load_default_content">
 	     <subant target="load" inheritall="false" inheritrefs="false">
 	       <fileset file="${DOCPORTAL_SYSTEM}/content/defaultsample/build.xml" />
 	     </subant>		
	</target>	
	
    <target name="checkXMLFiles"
        description="check wether xml files are valid">
        <echo>validating xml configuration files</echo>
        <!--
            <xmlvalidate>
            <fileset dir="${dir.WEB-INF}" >
            <include name="*.xml"/>
            <include name="*.tld"/>
            </fileset>
            </xmlvalidate>
        -->
    </target>

    <!-- =================================================================== -->
    <!-- Generate Hibernate getter/setter class                              -->
    <!-- =================================================================== -->

    <target name="create.hibindexer"
        description="dynamic class generation">
        <echo
            message="Generating Hibernate getter/setter class for query" />
        <!-- <property file="${DOCPORTAL_SYSTEM}/config/mycore.properties.query" /> -->
        <mkdir dir="${docportal.sources}/org/mycore/backend/query" />
        <java classname="org.mycore.backend.query.helper.GenClasses"
        	classpathref="docportal.classpath"
            fork="true">
            <arg value="${docportal.sources}/org/mycore/backend/query" />
        </java>
    </target>
	
    <!-- =================================================================== -->
    <!-- Generate mcr-taglib.jar                                 -->
    <!-- =================================================================== -->	
	
	<target name="compile-mcr-taglib"
		description="generation of a taglib.jar for mycore">
		<echo message="Generation of the MyCoRe-Taglib: mcr-taglib.jar" />
        <antcall target="javac">
            <param name="packages" value="org/mycore/frontend/jsp/taglibs/**" />
        </antcall>		
	</target>
	
	<target name="create.taglib" depends="compile-mcr-taglib">
		<mkdir dir="${docportal.config}/tmp-tld" />
		<copy file="${docportal.config}/mycore-taglibs.tld" tofile="${docportal.config}/tmp-tld/taglib.tld" />
        <jar
            destfile="${docportal.lib}/mycore-taglibs.jar">
            <fileset dir="${docportal.classes}" includes="org/mycore/frontend/jsp/taglibs/*.class" />
        	<metainf file="${docportal.config}/tmp-tld/taglib.tld" />
        </jar>	
        <delete dir="${docportal.config}/tmp-tld" />
	</target>
	
	<target name="zip-mycore"
		description="generation of a zip-file with all necessary mycore-data">
		<echo message="Generation of a zip-file with all necessary mycore-data" />
		<mkdir dir="${DOCPORTAL_SYSTEM}/tmp-mycore-zip" />
		<copy todir="${DOCPORTAL_SYSTEM}/tmp-mycore-zip">
			<fileset dir="${MYCORE_HOME}" >
				<include name="*.xml" />
				<include name="*.txt" />
				<include name="modules/**" />
				<include name="config/**" />
				<include name="documentation/**" />
				<include name="lib/**" />
				<include name="modules/**" />
				<include name="stylesheets/**" />				
				<include name="schema/**" />				
				<include name="sources/**" />
				<exclude name="config/build.properties" />
				<exclude name="lib/mycore*.jar" />				
			</fileset>
		</copy>
		<zip destfile="mycore-installation.zip">
			<zipfileset dir="${DOCPORTAL_SYSTEM}/tmp-mycore-zip" prefix="mycore"/>
		</zip>
		<delete dir="${DOCPORTAL_SYSTEM}/tmp-mycore-zip" />
	</target>
	
	<target name="zip-jspdocportal"
		description="generation of a zip-file with all necessary jspdocportal-data">
		<echo message="Generation of a zip-file with all necessary jspdocportal-data" />
		<mkdir dir="${DOCPORTAL_SYSTEM}/tmp-jspdocportal-zip" />
		<copy todir="${DOCPORTAL_SYSTEM}/tmp-jspdocportal-zip">
			<fileset dir="${DOCPORTAL_SYSTEM}" >
				<include name="sources/**" />
				<include name="*.xml" />
				<include name="*.txt" />
				<include name="config/**" />
				<include name="content/**" />
				<include name="gui-installation/**" />
				<include name="languages/**" />
				<include name="lib/**" />
				<include name="stylesheets/**" />				
				<include name="webpages/**" />				
				<exclude name="config/mycore.properties" />
				<exclude name="lib/docportal-for*.jar" />
				<exclude name="lib/mycore*taglibs.jar" />
				<exclude name="stylesheets/MCRJDOMSearch.xsl" />
				<exclude name="stylesheets/MCRMetadataCoreTemplates.xsl" />
				<exclude name="stylesheets/MCRMetadataCoreTypes.xsl" />
				<exclude name="stylesheets/MCRMetadataSchema.xsl" />				
			</fileset>
		</copy>
		<zip destfile="jspdocportal-installation.zip" >
			<zipfileset dir="${DOCPORTAL_SYSTEM}/tmp-jspdocportal-zip" prefix="jspdocportal"/>
		</zip>
		<delete dir="${DOCPORTAL_SYSTEM}/tmp-jspdocportal-zip" />
	</target>	
	
	<target name="create.workflowengine.database">
        <property name="commands.file" value="${basedir}/commands.txt" />
        <echo file="${commands.file}" append="false">
        	create jbpm database schema       	
        </echo>
        <antcall target="invoke.cli">
            <param name="cli.directory"
                value="${docportal.config}" />
            <param name="cli.command" value="process ${commands.file}" />
        </antcall>
        <delete file="${commands.file}" />		
	</target>
	
	<target name="deploy.processdefinition.xmetadiss">
        <property name="commands.file" value="${basedir}/commands.txt" />
        <echo file="${commands.file}" append="false">
        	deploy jbpm processdefinition from file workflow/xmetadiss.par/processdefinition.xml      	
        </echo>
        <antcall target="invoke.cli">
            <param name="cli.directory"
                value="${docportal.config}" />
            <param name="cli.command" value="process ${commands.file}" />
        </antcall>
        <delete file="${commands.file}" />		
	</target>	
	
	<target name="deploy.processdefinition.registeruser">
        <property name="commands.file" value="${basedir}/commands.txt" />
        <echo file="${commands.file}" append="false">
        	deploy jbpm processdefinition from file workflow/registeruser.par/processdefinition.xml      	
        </echo>
        <antcall target="invoke.cli">
            <param name="cli.directory"
                value="${docportal.config}" />
            <param name="cli.command" value="process ${commands.file}" />
        </antcall>
        <delete file="${commands.file}" />		
	</target>	

	<target name="deploy.processdefinition.publication">
        <property name="commands.file" value="${basedir}/commands.txt" />
        <echo file="${commands.file}" append="false">
        	deploy jbpm processdefinition from file workflow/publication.par/processdefinition.xml      	
        </echo>
        <antcall target="invoke.cli">
            <param name="cli.directory"
                value="${docportal.config}" />
            <param name="cli.command" value="process ${commands.file}" />
        </antcall>
        <delete file="${commands.file}" />		
	</target>

	<target name="deploy.processdefinition.institution">
        <property name="commands.file" value="${basedir}/commands.txt" />
        <echo file="${commands.file}" append="false">
        	deploy jbpm processdefinition from file workflow/institution.par/processdefinition.xml      	
        </echo>
        <antcall target="invoke.cli">
            <param name="cli.directory"
                value="${docportal.config}" />
            <param name="cli.command" value="process ${commands.file}" />
        </antcall>
        <delete file="${commands.file}" />		
	</target>	
	
	<target name="deploy.processdefinition.author">
        <property name="commands.file" value="${basedir}/commands.txt" />
        <echo file="${commands.file}" append="false">
        	deploy jbpm processdefinition from file workflow/author.par/processdefinition.xml      	
        </echo>
        <antcall target="invoke.cli">
            <param name="cli.directory"
                value="${docportal.config}" />
            <param name="cli.command" value="process ${commands.file}" />
        </antcall>
        <delete file="${commands.file}" />		
	</target>		
	
	<!-- depends is not possible because of process mode of hsqldb -->
	<target name="deploy.workflow.processdefinitions" >
        <property name="commands.file" value="${basedir}/commands.txt" />
        <echo file="${commands.file}" append="false">
        	deploy jbpm processdefinition from file workflow/author.par/processdefinition.xml      	
        	
        	deploy jbpm processdefinition from file workflow/publication.par/processdefinition.xml      	
        	
        	deploy jbpm processdefinition from file workflow/registeruser.par/processdefinition.xml      	
        	
        	deploy jbpm processdefinition from file workflow/xmetadiss.par/processdefinition.xml      	        	

    	   	deploy jbpm processdefinition from file workflow/institution.par/processdefinition.xml      	        	
        </echo>
        <antcall target="invoke.cli">
            <param name="cli.directory"
                value="${docportal.config}" />
            <param name="cli.command" value="process ${commands.file}" />
        </antcall>
        <delete file="${commands.file}" />
	</target>
	
	
	<target name="create.izpack.installer" depends="demo.jar">
		<echo message="copy base dir: ${MCR.BaseDirectory}" />
		<mkdir dir="${basedir}/../tmpsampledata"/>
		<copy todir="${basedir}/../tmpsampledata">
			<fileset dir="${MCR.BaseDirectory}" excludes="log/*.log" />
		</copy>			
		<taskdef name="izpack" classpath="${DOCPORTAL_HOME}/lib/standalone-compiler.jar" classname="com.izforge.izpack.ant.IzPackTask"/>
		<echo message="Makes the installer using IzPack"/>
		<copy file="${DOCPORTAL_SYSTEM}/config/mycore.properties.template" tofile="${DOCPORTAL_SYSTEM}/config/izpack/mycore.properties.izpack" overwrite="true">
			<filterchain>
				<tokenfilter>
				    <replaceregex pattern="^MCR\.BaseDirectory=.*$" replace="MCR.BaseDirectory=$INSTALL_PATH/sample-data" />
					<replaceregex pattern="^MCR\.hibernate\.connection\.url=.*$" replace="MCR.hibernate.connection.url=jdbc:hsqldb:file:%MCR.BaseDirectory%/hsqldb-data/mycore" />
					<replaceregex pattern="^MCR\.WorkflowEngine\.Administrator\.Email=.*$" replace="MCR.WorkflowEngine.Administrator.Email=$EMAILADDRESS" />
					<replaceregex pattern="^MCR\.mail\.server=.*$" replace="MCR.mail.server=$MAILSERVER" />					
				</tokenfilter>				
			</filterchain>
		</copy>
		<copy file="${DOCPORTAL_SYSTEM}/config/workflow/jbpm_hibernate.cfg.xml.template" tofile="${DOCPORTAL_SYSTEM}/config/izpack/jbpm_hibernate.cfg.xml.izpack" overwrite="true">
			<filterchain>
				<tokenfilter>
				    <replaceregex pattern="^(\s*&lt;property name=&quot;hibernate\.connection\.url&quot;&gt;).*$" replace="\1jdbc:hsqldb:file:$INSTALL_PATH/sample-data/hsqldb-data/mycore-workflow&lt;/property&gt;" />
				</tokenfilter>				
			</filterchain>
		</copy>		
		<izpack input="${DOCPORTAL_SYSTEM}/config/izpack/install.xml"
			output="${basedir}/jspdocportal-installer.jar"
			installerType="standard"
			basedir="${DOCPORTAL_SYSTEM}"/>
		<delete dir="${basedir}/../tmpsampledata" />
	</target>
	
	
</project>

<!-- ======================== End of file ======================== -->

