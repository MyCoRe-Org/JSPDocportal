<?xml version="1.0" encoding="UTF-8"?>

<process-definition  xmlns="urn:jbpm.org:jpdl-3.1"  name="thesis">

	<!-- SWIMLANES (= process roles) -->
	<swimlane name="initiator" />

	<swimlane name="thesiseditor">
		<assignment class="org.mycore.frontend.workflowengine.jbpm.MCRPooledActorAssignmentHandler">
			<groupName>adminthesis</groupName>
		</assignment>  
	</swimlane>

	<swimlane name="technicalAdministration">
		<assignment class="org.mycore.frontend.workflowengine.jbpm.MCRPooledActorAssignmentHandler">
			<groupName>admingroup</groupName>
		</assignment>       
	</swimlane>	

	<swimlane name="inSuspension">
		<assignment class="org.mycore.frontend.workflowengine.jbpm.MCRPooledActorAssignmentHandler">
			<groupName>suspendthesis</groupName>
		</assignment>  
	</swimlane><swimlane name="subjectExpert">
		<!--   <assignment expression="user(ernie)" /> -->
	</swimlane>  

	<start-state name="start">
		<task name="initialization" swimlane="initiator">
		</task>     
		<transition name="go2processInitialized" to="processInitialized" />
		<transition name="go2processEditInitialized" to="processEditInitialized" />     
	</start-state>

	<task-node name="processInitialized">
		<event type='node-enter'>
			<action class="org.mycore.frontend.workflowengine.jbpm.thesis.MCRCreateThesisAction" />                        
		</event>
		<transition name="go2isInitiatorsEmailAddressAvailable" to="isInitiatorsEmailAddressAvailable" />  
	</task-node>

	<task-node name="processEditInitialized">
		<task name="taskprocessEditInitialized" swimlane="initiator" />
		<transition name="go2canThesisBeSubmitted" to="canThesisBeSubmitted" />
	</task-node>

	<decision name="isInitiatorsEmailAddressAvailable">
		<transition name="no" to="getInitiatorsEmailAddress"> 
			<condition expression="#{empty(contextInstance.variables['initiatorEmail'])}"/>
		</transition>
		<transition name="yes" to="thesisCreated">
			<condition expression="#{!empty(contextInstance.variables['initiatorEmail'])}"/>
		</transition>
	</decision>

	<task-node name="getInitiatorsEmailAddress">
		<task name="taskGetInitiatorsEmailAddress" swimlane="initiator" />
		<transition name="go2IsInitiatorsEmailAddressAvailable" to="isInitiatorsEmailAddressAvailable" />
	</task-node>

	<task-node name="thesisCreated">
		<task name="taskCompleteThesisAndSendToLibrary" swimlane="initiator" />
		<transition name="go2canThesisBeSubmitted" to="canThesisBeSubmitted" />
	</task-node>

	<decision name="canThesisBeSubmitted">
		<handler class="org.mycore.frontend.workflowengine.jbpm.thesis.MCRDecisionHandlerThesis" />
		<transition name="thesisCantBeSubmitted" to="thesisCreated" />
		<transition name="thesisCanBeSubmitted" to="thesisSubmitted" />
	</decision>

	<task-node name="thesisSubmitted">
		<event type='node-enter'>
			<action class="org.mycore.frontend.workflowengine.jbpm.thesis.MCRThesisSubmittedAction">
				<lockedVariables>initiator,createdDocID,authorID,reservatedURN,attachedDerivates</lockedVariables>
			</action>
			<action class="org.mycore.frontend.workflowengine.jbpm.MCRSendmailAction">
				<from>MCR.WorkflowEngine.thesis.from</from>
				<to>MCR.WorkflowEngine.newtaskemail.thesis</to>
				<replyTo>MCR.WorkflowEngine.thesis.replyto</replyTo>
				<subject>MCR.WorkflowEngine.thesis.subject.newtask</subject>
				<body>MCR.WorkflowEngine.thesis.body.newtask</body>  
			</action>     

		</event> 
		<task name="taskCheckCompleteness" swimlane="thesiseditor">
		</task> 
		<transition name="go2sendBackToThesisCreated" to="sendBackToThesisCreated" >
			<action class="org.mycore.frontend.workflowengine.jbpm.MCRSetDefaultAclsAction">
				<varmcrid>createdDocID</varmcrid>
				<varuserid>initiator</varuserid>
			</action>
		</transition>
		<transition name="go2suspendThesis" to="suspendThesis" />
		<transition name="go2canThesisBeCommitted" to="canThesisBeCommitted" />
	</task-node>

	<task-node name="suspendThesis">
		<task name="getEndOfSuspensionDate" swimlane="thesiseditor"/>
		<transition name="go2checkSuspensionDate" to="isSuspensionDateAvailable" />
	</task-node>

	<decision name="isSuspensionDateAvailable">
		<handler class="org.mycore.frontend.workflowengine.jbpm.xmetadiss.MCRDecisionHandlerXmetadiss" />
		<transition name="yes" to="thesisSuspended" />
		<transition name="no" to="suspendThesis" />
	</decision>

	<task-node name="thesisSuspended">
		<task name="waitInSuspension" swimlane="inSuspension" />
		<transition name="endSuspension" to="thesisSubmitted" />
	</task-node>




	<task-node name="sendBackToThesisCreated">
		<task name="taskEnterMessageData" swimlane="thesiseditor" />
		<transition name="go2thesisCreated2" to="thesisCreated">
			<action class="org.mycore.frontend.workflowengine.jbpm.MCRSendmailAction">
				<from>MCR.WorkflowEngine.thesis.from</from>
				<to>initiator</to>
				<replyTo>MCR.WorkflowEngine.thesis.from</replyTo>
				<subject>MCR.WorkflowEngine.thesis.subject</subject>
				<!-- <body>Mustertext</body> -->
				<jbpmVariableName>tmpTaskMessage</jbpmVariableName>
			</action>     
		</transition>
	</task-node>

	<task-node name="checkNonDigitalRequirements">
		<task name="taskCheckIfSignedAffirmationYetAvailable" swimlane="thesiseditor" />
		<transition name="go2canThesisBeCommitted" to="canThesisBeCommitted">
			<action class="org.mycore.frontend.workflowengine.jbpm.MCRSetWorkflowVariableAction">
				<varname>signedAffirmationAvailable</varname>
				<value>true</value>
			</action>
		</transition>
		<transition name="go2requireAffirmation" to="requireAffirmation" />
	</task-node>

	<task-node name="requireAffirmation">
		<task name="taskRequireSignedAffirmation" swimlane="thesiseditor" />
		<transition name="go2checkNonDigitalRequirements" to="checkNonDigitalRequirements">
			<action class="org.mycore.frontend.workflowengine.jbpm.MCRSendmailAction">
				<from>MCR.WorkflowEngine.thesis.from</from>
				<to>initiator</to>
				<replyTo>MCR.WorkflowEngine.thesis.from</replyTo>
				<subject>MCR.WorkflowEngine.thesis.subject.aff</subject>
				<!-- <body>Mustertext</body> -->
				<jbpmVariableName>tmpTaskMessage</jbpmVariableName>
				<dateOfSubmissionVariable>lastRequiredAffirmation</dateOfSubmissionVariable>
			</action>     
		</transition>
		<transition name="go2checkNonDigitalRequirementsWithoutMail" to="checkNonDigitalRequirements" />
	</task-node>

	<decision name="canThesisBeCommitted">
		<handler class="org.mycore.frontend.workflowengine.jbpm.thesis.MCRDecisionHandlerThesis" />
		<transition name="go2sendBackToThesisCreated" to="sendBackToThesisCreated" />
		<transition name="go2checkNonDigitalRequirements" to="checkNonDigitalRequirements" />
		<transition name="go2wasCommitmentSuccessful" to="wasCommitmentSuccessful">
			<action class="org.mycore.frontend.workflowengine.jbpm.MCRCommitObjectAction">
				<varnameOBJID>createdDocID</varnameOBJID>
				<varnameERROR>COMMITERROR</varnameERROR>
			</action>
		</transition>
	</decision>  

	<decision name="wasCommitmentSuccessful">
		<transition name="go2adminCheck" to="adminCheck">  
			<condition expression="#{!empty(contextInstance.variables['COMMITERROR'])}" />
		</transition>
		<transition name="go2thesisCommitted" to="thesisCommitted">  
			<condition expression="#{empty(contextInstance.variables['COMMITERROR'])}" />
		</transition>     
	</decision>

	<task-node name="adminCheck">
		<event type='node-enter'>
			<action class="org.mycore.frontend.workflowengine.jbpm.MCRSendmailAction">
				<from>MCR.WorkflowEngine.thesis.from</from>
				<to>MCR.WorkflowEngine.thesis.to</to>
				<from>MCR.WorkflowEngine.thesis.from</from>
				<subject>MCR.WorkflowEngine.thesis.subject.admin</subject>
				<body>MCR.WorkflowEngine.thesis.body.admin</body>
				<jbpmVariableName>createdDocID</jbpmVariableName>
			</action>          
		</event>
		<task name="taskAdminCheckCommitmentNotSuccessFul" swimlane="technicalAdministration" />
		<transition name="go2thesisCommitted" to="thesisCommitted" />
	</task-node>     

	<task-node name="thesisCommitted">
		<event type='node-enter'>
			<action class="org.mycore.frontend.workflowengine.jbpm.MCRSendmailAction">
				<from>MCR.WorkflowEngine.thesis.from</from>
				<to>initiator</to>
				<subject>MCR.WorkflowEngine.thesis.subject.commit</subject>
				<body>MCR.WorkflowEngine.thesis.body.commit</body>
				<jbpmVariableName>createdDocID</jbpmVariableName>
			</action> 
		</event>     
		<transition name="go2cleanUpWorkingDirectory" to="cleanUpWorkingDirectory" />     
	</task-node>

	<end-state name="cleanUpWorkingDirectory">
		<event type='node-enter'>
			<action class="org.mycore.frontend.workflowengine.jbpm.MCRCleanUpWorkflowAction">
				<varnameOBJID>createdDocID</varnameOBJID>
				<varnameERROR>CLEANUPERROR</varnameERROR>
			</action>               
		</event>   
	</end-state>

</process-definition>